@model Itadakimasu.Models.ViewFoodViewer

@{
    ViewData["Title"] = "Home Page";
}

<div class="row">
    <div class="col-2">
        <ul class="list-group">
            @foreach (var item in Model.Foods)
            {
                <li class="list-group-item d-flex justify-content-between">
                    <img width="24" height="24" src="@item.BlobUrl" alt='@(item.Name)の画像' title="@(item.Name)">
                    <a href="FoodViewer?foodName=@(item.Name)&stateNumber=@(ViewData["StateNumber"])">@(item.Name)</a><span class="badge bg-light text-dark rounded-pill">@item.FoodImageCount</span>
                </li>
            }
        </ul>
    </div>
    <div class="col-10">
        <div class="d-flex flex-row">
            @await Html.PartialAsync("_Select", ViewData["SelectViewerCount"])
            @await Html.PartialAsync("_Select", ViewData["SelectViewerSize"])
            <div class="col-auto">
                表示番号:
                @for(int number = -1; number <= 5; number++)
                {
                    <button type="button" class="badge rounded-pill bg-light text-dark" onclick="setFilterStateNumber('@(number)')">@(number)</button>
                }
            </div>
        </div>
        <div class="d-flex flex-row">
            <div class="col-auto px-2 py-1">
              <input class="form-check-input" type="checkbox" id="check-all" onclick="allChecked(this)">
              <label class="form-check-label" for="check-all">全チェック</label>
            </div>
            <div class="col-auto">
                チェックした画像をまとめて
                @for(int number = -1; number <= 5; number++)
                {
                    <button type="button" class="badge rounded-pill bg-dark" onclick="setAllStateNumber('@(number)')">@(number)</button>
                }
            </div>
        </div>
        <div>
            <ul class="d-flex flex-wrap">
                @for (var i = 0; i < Model.FoodImages.Count; i++)
                {
                    var item = Model.FoodImages[i];
                    <li class="list-group-item">
                        <div class="d-flex flex-row justify-content-between">
                            <div>
                                <input class="check_@(item.Id)" name="checkbox" type="checkbox" data-id="@(item.Id)" onclick="checkSync(this)" />
                            </div>
                            <div></div>
                            <div>
                                <div id="state_number_@(item.Id)" class="badge rounded-pill bg-light text-dark">@item.StatusNumber</div>
                            </div>
                        </div>
                        <div>
                            <label for="popup_@(item.Id)">
                                <span class="btn">
                                    <img class="img-thumbnail @(ViewData["CurrentViewerSize"])" src="@item.BlobSUrl" alt='@(item.Name)の画像' title="@(item.Name)">
                                </span>
                            </label>
                        </div>
                        <div class="d-flex flex-row justify-content-center">
                            <span>@(item.Name)</span>
                        </div>
                         <div class="popup_wrap">
                            <input id="popup_@(item.Id)" type="checkbox">
                            <div class="popup_overlay">
                                <label for="popup_@(item.Id)" class="popup_trigger"></label>
                                <div class="popup_content">
                                    <div class="d-flex flex-row justify-content-between">
                                        <div>
                                            <input class="check_@(item.Id)" name="checkbox" type="checkbox" onclick="checkSync(this)" />
                                        </div>
                                        <div></div>
                                        <div>
                                            <label for="popup_@(item.Id)" class="close_btn"><i class="fa-regular fa-circle-xmark"></i></label>
                                        </div>
                                    </div>
                                    <a class="btn btn-link" onclick="changeImage('popup_@(item.Id)', 'popup_@(item.NextId)')">
                                        <img class="popup_content_img" src="@item.BlobUrl">
                                    </a>
                                    <div class="d-flex flex-row justify-content-center">
                                        <div>@item.Name</div>
                                    </div>
                                    <div class="d-flex flex-row justify-content-center" data-id="@(item.Id)">
                                        @{
                                            for(int number = -1; number <= 5; number++)
                                            {
                                                var color = (number == item.StatusNumber) ? "bg-light text-dark" : "bg-dark";
                                                <a href="#" class="badge rounded-pill @(color) btn-foodImage" data-value="@(number)">@(number)</a>
                                            }
                                        }
                                    </div>
                                    <div class="d-flex flex-row justify-content-center">
                                        <div>@item.XY</div>
                                    </div>
                                    <div class="d-flex flex-row justify-content-between">
                                        <button type="button" class="btn btn-link" onclick="changeImage('popup_@(item.Id)', 'popup_@(item.PrevId)')">&laquo;&laquo;前へ</button>
                                        <a>@(i + 1)/@(Model.FoodImages.Count)</a>
                                        <button type="button" class="btn btn-link" onclick="changeImage('popup_@(item.Id)', 'popup_@(item.NextId)')">次へ&raquo;&raquo;</button>
                                    </div>
                                </div>
                            </div>
                         </div>
                     </li>
                }
            </ul>
            <div class="clearfix" />
        </div>
        @await Html.PartialAsync("_Pagination", Model.FoodImages.Parameter)
    </div>
</div>

<script type="text/javascript">
    function setFilterStateNumber(stateNumber) 
    {
        window.location = `/FoodViewer?stateNumber=${stateNumber}`;
    }

    async function setAllStateNumber(state) 
    {
        let ids = [];
        for(let element of document.getElementsByName("checkbox"))
        {
            if(!element.dataset.id || !element.checked) continue;
            ids.push(element.dataset.id);
        }
        const response = await fetch('/api/FoodImages/food-image-all-state', {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ Ids: ids, StateNumber: state })
        });
        window.location.reload();
    }

    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.btn-foodImage').forEach(btn => btn.addEventListener('click', async (event) => {
            const id = event.target.parentNode.dataset.id;
            const number = (event.target.dataset.value);
            const response = await fetch('/api/FoodImages/food-image-state', {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ Id: id, StateNumber: number })
            });
            if (!response.ok) return;

            const children = event.target.parentNode.children;
            for (let i = 0; i < children.length; i++) {
                const color = (i - 1 == number) ? "bg-light text-dark" : "bg-dark";
                children[i].className = `badge rounded-pill ${color} btn-foodImage`;
            }
            document.getElementById(`state_number_${id}`).innerHTML = number;
        }));
    });
</script>

